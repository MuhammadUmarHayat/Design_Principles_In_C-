///*
Scenario:
Weâ€™ll create a program to manage a simple library system where you can add books and list them.

High Cohesion: Each class should have a single, focused responsibility.
Low Coupling: Classes should interact minimally with each other and depend on abstractions rather than concrete implementations.

*///

using System;
using System.Collections.Generic;

// Model: Represents a Book
class Book
{
    public string Title { get; set; }
    public string Author { get; set; }

    public Book(string title, string author)
    {
        Title = title;
        Author = author;
    }
}

// Handles the storage and retrieval of books (High Cohesion)
class Library
{
    private readonly List<Book> _books = new List<Book>();

    public void AddBook(Book book)
    {
        _books.Add(book);
        Console.WriteLine("Book added successfully.");
    }

    public List<Book> GetBooks()
    {
        return _books;
    }
}

// Handles user interactions (High Cohesion, Low Coupling with Library)
class LibraryUI
{
    private readonly Library _library;

    public LibraryUI(Library library)
    {
        _library = library;
    }

    public void ShowMenu()
    {
        while (true)
        {
            Console.WriteLine("\nLibrary Menu:");
            Console.WriteLine("1. Add a Book");
            Console.WriteLine("2. List All Books");
            Console.WriteLine("3. Exit");
            Console.Write("Choose an option: ");
            string choice = Console.ReadLine();

            switch (choice)
            {
                case "1":
                    AddBook();
                    break;
                case "2":
                    ListBooks();
                    break;
                case "3":
                    Console.WriteLine("Exiting program. Goodbye!");
                    return;
                default:
                    Console.WriteLine("Invalid option. Please try again.");
                    break;
            }
        }
    }

    private void AddBook()
    {
        Console.Write("Enter book title: ");
        string title = Console.ReadLine();
        Console.Write("Enter book author: ");
        string author = Console.ReadLine();

        var book = new Book(title, author);
        _library.AddBook(book);
    }

    private void ListBooks()
    {
        var books = _library.GetBooks();

        if (books.Count == 0)
        {
            Console.WriteLine("No books in the library.");
        }
        else
        {
            Console.WriteLine("\nBooks in the Library:");
            foreach (var book in books)
            {
                Console.WriteLine($"- {book.Title} by {book.Author}");
            }
        }
    }
}

// Main Program: Entry point and orchestrator
class Program
{
    static void Main(string[] args)
    {
        var library = new Library();
        var libraryUI = new LibraryUI(library);

        libraryUI.ShowMenu();
    }
}
